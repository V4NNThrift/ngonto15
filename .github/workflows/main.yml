name: Yanzz RDP (Windows Server 2022)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 3600

    steps:
      - name: Print Windows version
        shell: powershell
        run: |
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          # Enable Remote Desktop & (opsional) matikan NLA (UserAuthentication=0)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Firewall RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null

          # Restart RDP service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with specific password
        shell: powershell
        run: |
          # ⚠️ Hardcode password itu riskan; idealnya pakai secret.
          $plain = "Evan123456"
          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force

          $existing = Get-LocalUser -Name "Yanzz" -ErrorAction SilentlyContinue
          if ($null -eq $existing) {
            New-LocalUser -Name "Yanzz" -Password $securePass -AccountNeverExpires | Out-Null
          } else {
            Set-LocalUser -Name "Yanzz" -Password $securePass
          }
          Add-LocalGroupMember -Group "Administrators" -Member "Yanzz" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Yanzz" -ErrorAction SilentlyContinue

          if (-not (Get-LocalUser -Name "Yanzz" -ErrorAction SilentlyContinue)) {
            Write-Error "User creation failed"
            exit 1
          }

      - name: Install Tailscale
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: powershell
        env:
          TS_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TS_KEY) {
            Write-Error "secrets.TAILSCALE_AUTH_KEY is not set."
            exit 1
          }
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="$env:TS_KEY" --hostname="gh-runner-$env:GITHUB_RUN_ID"

          # Ambil IPv4 Tailscale
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-Object -First 1).Trim()
            if (-not $tsIP) { Start-Sleep -Seconds 5; $retries++ }
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned. Exiting."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility (TCP 3389)
        shell: powershell
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $ok = (Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389).TcpTestSucceeded
          if (-not $ok) { Write-Error "TCP 3389 test failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      # === SOFTWARE SECTION (pakai Chocolatey, no winget) ===
      - name: Ensure Chocolatey available (should be preinstalled on runner)
        shell: powershell
        run: |
          try {
            choco --version
          } catch {
            Write-Error "Chocolatey not available; this image should have it. Aborting."
            exit 1
          }

      - name: Install software (WinRAR, VC++ runtime, Bloxstrap)
        shell: powershell
        run: |
          choco install winrar -y --no-progress
          choco install vcredist140 -y --no-progress
          choco install bloxstrap -y --no-progress
          # (opsional) WebView2 runtime via choco, jika diperlukan oleh app lain
          choco install microsoft-edge-webview2-runtime -y --no-progress

      - name: Initialize Bloxstrap (quiet)
        shell: powershell
        continue-on-error: true
        run: |
          $bxUser = "$env:LOCALAPPDATA\Bloxstrap\Bloxstrap.exe"
          $bxMachine = "C:\Program Files\Bloxstrap\Bloxstrap.exe"
          $bx = if (Test-Path $bxUser) { $bxUser } elseif (Test-Path $bxMachine) { $bxMachine } else { $null }
          if ($bx) {
            Start-Process -FilePath $bx -ArgumentList "--quiet" -WindowStyle Hidden
            Start-Sleep -Seconds 10
          } else {
            Write-Host "Bloxstrap executable not found (yet)."
          }

      - name: Attempt direct Roblox install (fallback)
        shell: powershell
        continue-on-error: true
        run: |
          $rbx = "$env:TEMP\RobloxPlayerInstaller.exe"
          try {
            Invoke-WebRequest -Uri "https://setup.rbxcdn.com/RobloxPlayerInstaller.exe" -OutFile $rbx
            Start-Process -FilePath $rbx -ArgumentList "" -WindowStyle Hidden -Wait
          } catch {
            Write-Host "Roblox fallback install failed: $($_.Exception.Message)"
          } finally {
            Remove-Item $rbx -Force -ErrorAction SilentlyContinue
          }

      - name: (Optional) Install Mesa3D software OpenGL (untuk app OpenGL lawas)
        shell: powershell
        continue-on-error: true
        run: |
          # Roblox biasanya pakai Direct3D; ini opsional buat aplikasi OpenGL.
          $releasesApi = "https://api.github.com/repos/pal1000/mesa-dist-win/releases/latest"
          $zip = "$env:TEMP\mesa.zip"
          $dst = "C:\mesa-dist-win"
          try {
            $resp = Invoke-RestMethod -Uri $releasesApi
            $asset = $resp.assets | Where-Object { $_.name -match "msvc" -and $_.name -match "release" -and $_.name -like "*.zip" } | Select-Object -First 1
            if ($null -ne $asset) {
              Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $zip
              if (Test-Path $dst) { Remove-Item $dst -Recurse -Force }
              Expand-Archive -Path $zip -DestinationPath $dst
              Remove-Item $zip -Force
              # Untuk memakai Mesa pada app tertentu, copy-kan opengl32.dll ke folder app tsb.
              # Contoh:
              # $appDir = "C:\SomeApp"
              # if (Test-Path $appDir) { Copy-Item "$dst\mesa\opengl32.dll" "$appDir\" -Force }
            }
          } catch {
            Write-Host "Skip Mesa3D (download failed): $($_.Exception.Message)"
          }

      - name: Show Access Info (no password in logs)
        shell: powershell
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: Yanzz"
          Write-Host "Password: (pakai yang di workflow)"
          Write-Host "==================`n"

      - name: Maintain Connection
        shell: powershell
        run: |
          while ($true) {
            Write-Host "[$(Get-Date -Format o)] RDP active. Stop the job to terminate."
            Start-Sleep -Seconds 300
          }
