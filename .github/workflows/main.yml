name: Yanzz RDP (Choco - Mesa & WinRAR Fixed)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 3600

    steps:
      - name: Print Windows version
        run: |
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with specific password
        run: |
          $plain = "Evan123456"
          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force
          if (-not (Get-LocalUser -Name "Yanzz" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "Yanzz" -Password $securePass -AccountNeverExpires | Out-Null
          } else {
            Set-LocalUser -Name "Yanzz" -Password $securePass
          }
          Add-LocalGroupMember -Group "Administrators" -Member "Yanzz" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Yanzz" -ErrorAction SilentlyContinue

      - name: âœ¨ Install Software with Chocolatey (Mesa, WinRAR)
        run: |
          # Install Mesa3D using the latest stable version available
          choco install mesa -y
          
          # Copy the necessary DLLs to System32 to enable system-wide OpenGL support
          Write-Host "Copying Mesa DLLs to System32..."
          Copy-Item -Path "C:\ProgramData\chocolatey\lib\mesa\tools\x64\opengl32.dll" -Destination "C:\Windows\System32\" -Force
          Copy-Item -Path "C:\ProgramData\chocolatey\lib\mesa\tools\x64\libgallium_wgl.dll" -Destination "C:\Windows\System32\" -Force
          Copy-Item -Path "C:\ProgramData\chocolatey\lib\mesa\tools\x64\libglapi.dll" -Destination "C:\Windows\System32\" -Force
          
          # Install WinRAR
          choco install winrar -y
          
          Write-Host "Software installation complete."

      - name: Install Tailscale
        run: |
          choco install tailscale -y

      - name: Establish Tailscale Connection
        env:
          TS_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TS_KEY) {
            Write-Error "secrets.TAILSCALE_AUTH_KEY is not set."
            exit 1
          }
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="$env:TS_KEY" --hostname="gh-runner-$env:GITHUB_RUN_ID"
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-Object -First 1).Trim()
            if (-not $tsIP) { Start-Sleep -Seconds 5; $retries++ }
          }
          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility (TCP 3389)
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Show Access Info (no password in logs)
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: Yanzz"
          Write-Host "Password: (use the one configured in workflow)"
          Write-Host "==================`n"

      - name: Maintain Connection
        run: |
          while ($true) {
            Write-Host "[$(Get-Date -Format o)] RDP active. Stop the job to terminate."
            Start-Sleep -Seconds 300
          }
