name: Yanzz RDP (Windows Server 2022)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 3600

    steps:
      - name: Print Windows version
        run: |
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable NLA for easier connection
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force
          
          # Open firewall for RDP (TCP/3389)
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create RDP User with specific password
        run: |
          # WARNING: Hardcoding passwords in workflows is insecure.
          $plain = "Evan123456"
          $securePass = ConvertTo-SecureString $plain -AsPlainText -Force
          
          # Create or update local user
          $existing = Get-LocalUser -Name "Yanzz" -ErrorAction SilentlyContinue
          if ($null -eq $existing) {
            New-LocalUser -Name "Yanzz" -Password $securePass -AccountNeverExpires | Out-Null
          } else {
            Set-LocalUser -Name "Yanzz" -Password $securePass
          }
          
          # Add user to Administrators and Remote Desktop Users groups
          Add-LocalGroupMember -Group "Administrators" -Member "Yanzz" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Yanzz" -ErrorAction SilentlyContinue

      - name: ✨ Install Mesa3D (Software GPU) for Basic Gaming
        run: |
          Write-Host "Downloading and installing Mesa3D for software-based graphics rendering..."
          $mesaUrl = "https://github.com/pal1000/mesa-dist-win/releases/download/24.1.1/mesa3d-24.1.1-release-msvc.7z"
          $mesaPath = "$env:TEMP\mesa3d.7z"
          
          # Install 7-Zip to extract the archive
          winget install -e --id 7zip.7zip --accept-source-agreements --accept-package-agreements
          
          # Download Mesa3D
          Invoke-WebRequest -Uri $mesaUrl -OutFile $mesaPath
          
          # Extract the files
          & "C:\Program Files\7-Zip\7z.exe" x $mesaPath -o"$env:TEMP\mesa3d" -y
          
          # Copy the necessary DLLs to System32 to enable system-wide OpenGL support
          Copy-Item -Path "$env:TEMP\mesa3d\x64\opengl32.dll" -Destination "C:\Windows\System32\"
          Copy-Item -Path "$env:TEMP\mesa3d\x64\libgallium_wgl.dll" -Destination "C:\Windows\System32\"
          Copy-Item -Path "$env:TEMP\mesa3d\x64\libglapi.dll" -Destination "C:\Windows\System32\"
          Write-Host "Mesa3D drivers installed successfully."

      - name: ✨ Install Additional Software (WinRAR, Roblox)
        run: |
          Write-Host "Installing WinRAR and Roblox using winget..."
          winget install -e --id WinRAR.WinRAR --accept-source-agreements --accept-package-agreements
          winget install -e --id Roblox.Roblox --accept-source-agreements --accept-package-agreements
          Write-Host "Software installation complete."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.72.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        env:
          TS_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TS_KEY) {
            Write-Error "secrets.TAILSCALE_AUTH_KEY is not set."
            exit 1
          }
          
          # Bring up Tailscale
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey="$env:TS_KEY" --hostname="gh-runner-$env:GITHUB_RUN_ID"
          
          # Wait for Tailscale to assign an IPv4 address
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-Object -First 1).Trim()
            if (-not $tsIP) { Start-Sleep -Seconds 5; $retries++ }
          }
          
          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility (TCP 3389)
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Show Access Info (no password in logs)
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: Yanzz"
          Write-Host "Password: (use the one configured in workflow)"
          Write-Host "==================`n"

      - name: Maintain Connection
        run: |
          while ($true) {
            Write-Host "[$(Get-Date -Format o)] RDP active. Stop the job to terminate."
            Start-Sleep -Seconds 300
          }
